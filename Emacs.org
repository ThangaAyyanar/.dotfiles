#+title: Emacs From Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* UI Configuration
** Basic Stuff
#+begin_src emacs-lisp
;; Remove startup screen
(setq inhibit-startup-message t)

;; Turn off scroll bar, menu bar, and tool tip
(scroll-bar-mode -1)
(menu-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)

(set-fringe-mode 10)

;; No autoback up and lock files
(setq
 make-backup-files nil
 auto-save-default nil
 create-lockfiles nil)
#+end_src

** Enable Numbers
#+begin_src emacs-lisp
  ;; Enabling Number line
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)

  ;; Disable line number for some mode
  (dolist (mode '(term-mode-hook
                  shell-mode-hook
                  nov-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font configuration
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height 170)
#+end_src

** Make ESC as quit prompt
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit) 
#+end_src

** Highlight Current Line
#+begin_src emacs-lisp
(require 'hl-line)
(add-hook 'prog-mode-hook #'hl-line-mode)
(add-hook 'text-mode-hook #'hl-line-mode)
(set-face-attribute 'hl-line nil :background "gray21")
#+end_src

** Mac Path setup
- Brew installed packages path available to emacs
#+begin_src emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))
#+end_src

* Package Configuration
** Initialization
#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use package on non-linux based system
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src

** Use package verbose
- Only use this for debugging start time

#+begin_src emacs-lisp
;;(setq use-package-verbose t)
#+end_src

** Auto Update Packages

#+begin_src emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "11:00"))
#+end_src
* Applications
** Erc
- irc client
#+begin_src emacs-lisp
  ;; (setq erc-server "irc.libera.chat"
  ;;       erc-nick "GoldAyan"    ; Change this!
  ;;       erc-user-full-name "GoldAyan"  ; And this!
  ;;       erc-track-shorten-start 8
  ;;       erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs"))
  ;;       erc-kill-buffer-on-part t
  ;;             erc-auto-query 'bury)
#+end_src
*** Basic Commands
- Start by calling M-x erc-tls
  |----------------------+------------------------------------------------|
  | Command              | Usage                                          |
  |----------------------+------------------------------------------------|
  | /join <channel name> | Join channel                                   |
  | /part                | leave channel                                  |
  | /list                | List available channel                         |
  | /whois <user>        | information about user                         |
  | /query <user>        | Direct message to user                         |
  | /msg <user> <msg>    | Send one time message to user                  |
  | /nick <user>         | Changing nickname                              |
  | /quit <msg>          | quit and send message to all connected channel |
  | /reconnect           | reconnect to irc server or chat                |
  |----------------------+------------------------------------------------|
- src: https://systemcrafters.cc/chatting-with-emacs/irc-basics-with-erc/

** Nov - epub reader

#+begin_src emacs-lisp
  (defun ayan/my-nov-font-setup ()
    (face-remap-add-relative 'variable-pitch :family "Source Sans Pro Semibold"
                                             :height 1.3))

  (use-package nov
      :defer t 
      :init
      (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
      :config
      (setq nov-text-width t)
      (setq visual-fill-column-center-text t)
      (add-hook 'nov-mode-hook 'visual-line-mode)
      (add-hook 'nov-mode-hook 'visual-fill-column-mode)
      (add-hook 'nov-mode-hook 'ayan/my-nov-font-setup)
        )
#+end_src

** Pdf Reader - pdf-tools

#+begin_src emacs-lisp
  ;; (use-package pdf-tools
  ;;   :ensure t
  ;;   :pin manual ;; don't reinstall when package updates
  ;;   :mode  ("\\.pdf\\'" . pdf-view-mode)
  ;;   :config
  ;;   (setq-default pdf-view-display-size 'fit-page)
  ;;   (setq pdf-annot-activate-created-annotations t)
  ;;   (pdf-tools-install :no-query)
  ;;   (require 'pdf-occur))

#+end_src

** HTTP Client

#+begin_src emacs-lisp
(use-package verb
  :mode ("\\.org\\'" . org-mode))
#+end_src

** Speed Type

#+begin_src emacs-lisp
  (use-package speed-type
    :commands (speed-type-top-100 speed-type-top-1000)
  )
#+end_src

** Speed Read

#+begin_src emacs-lisp
  (use-package spray
    :commands spray-mode
  )
#+end_src
* Packages
** Command log mode
- See what keys are pressed in current buffer
- <M-x> type global-command-log-mode
- <M-x> type clm/toggle-command-log-buffer
#+begin_src emacs-lisp
  (use-package command-log-mode
    :commands command-log-mode
  )
#+end_src
** Swiper
- Find the particular line in current buffer easily with swiper
#+begin_src emacs-lisp
(use-package swiper
  :bind ("C-s" . swiper))
#+end_src
** Counsel and Ivy
- Completion engine
- Replace the emacs buffer switching, find files, M-x with this.
#+begin_src emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-ibuffer)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history))
  :config
  (setq ivy-initial-inputs-alist nil))

(use-package ivy
  :ensure t
  :diminish
  :bind (:map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))
#+end_src
** Counsel Dash
#+begin_src emacs-lisp
  (use-package counsel-dash
    :defer t
    :init
    (add-hook 'swift-mode-hook (lambda () (setq-local counsel-dash-docsets '("Swift"))))
    (add-hook 'python-mode-hook (lambda () (setq-local counsel-dash-docsets '("Python 3"))))
    (add-hook 'js-mode-hook (lambda () (setq-local counsel-dash-docsets '("React"))))
    :config
    (setq counsel-dash-docsets-path "~/.docsets")
    (setq counsel-dash-common-docsets '("Bash"))
  )
#+end_src
** Ivy rich
- Gives description for M-x
#+begin_src emacs-lisp
(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))
#+end_src
** Which Key
- Show as hint for keymap
#+begin_src emacs-lisp
;; which key
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src
** Hydra
- save us from hitting the key multiple times
#+begin_src emacs-lisp
(use-package hydra
  :defer t)
#+end_src
*** Hydra Definition
#+begin_src emacs-lisp
(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))
#+end_src
** Status bar
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src
** Rainbow delimiter
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Helpful
- More documentation
#+begin_src emacs-lisp
(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src
** Doom themes
- Extra themes
#+begin_src emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-oceanic-next t))
#+end_src
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))

  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
** All the icons
- After the package installation
- M-x all-the-icon-install-fonts<RET> (first installation only)
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
** EVIL Mode and EVIL collection
- VI emulation in emacs
*** Evil hook
- We don't need all buffer should start in normal mode
#+begin_src emacs-lisp
;; This function ensure this mode should start in insert mode
(defun ayan/evil-hook ()
  (dolist (mode '(eshell-mode
                  term-mode))
  (add-to-list 'evil-emacs-state-modes mode)))
#+end_src
*** Configuration
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    ;;(setq evil-want-C-i-jump nil)
    :config
    (add-hook 'evil-mode-hook 'ayan/evil-hook)
    (evil-mode 1)
    ;; Normal key mapping
    (define-key evil-insert-state-map (kbd "C-[") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src
** Magit
- Git interface for emacs
#+begin_src emacs-lisp
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
** Projectile
- Project management
#+begin_src emacs-lisp
  ;; Projectile
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode +1)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    ;;(when (file-directory-p "~/Programs")
    (setq projectile-project-search-path '("~/Programs"
                                           ))
    ;;(add-to-list 'projectile-ignored-projects (concat (getenv "HOME") "/")) ; Do not consider the home dir as a project
    (setq projectile-switch-project-action #'counsel-projectile-find-file)
  )

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src
** Org Mode
- Currently not customized to my need
- In progress
*** Initial Configuration
#+begin_src emacs-lisp
  (defun ayan/org-mode-setup ()
    (org-indent-mode)
    ;;(variable-pitch-mode 1)
    (visual-line-mode 1)
  )

  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . ayan/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-agenda-files
          '("~/Documents/My Library/OrgFiles/Tasks.org"
            "/Users/thanga-6745/Zoho WorkDrive (Enterprise)/My Folders/Sync/Tasks.org"
            ;; "~/Documents/My Library/OrgFiles/Tasks.org"
            ))

    ;; org habit (set the propert to habit to track it)
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    ;; Archiving tags
    (setq org-refile-targets
          '(("Tasks.org" :maxlevel . 1)
            ;;("OTHERFILE.org" :maxlevel . 2)
            ))

    ;; save the all org file after the refile is done
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

      ;; Configure custom agenda views
    (setq org-agenda-custom-commands
     '(("d" "Dashboard"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; Low-effort next actions
      ;; Org set effort related stuff (org properties for the header)
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))))

      ;; Org default tags
      ;; <C-c C-q> tag addition view
      (setq org-tag-alist
      '((:startgroup)
         ; Put mutually exclusive tags here
         (:endgroup)
         ("@errand" . ?E)
         ("@home" . ?H)
         ("@work" . ?W)
         ("agenda" . ?a)
         ("planning" . ?p)
         ("publish" . ?P)
         ("batch" . ?b)
         ("note" . ?n)
         ("idea" . ?i)))

      ;; Templates (org-capture)
      (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/Documents/My Library/OrgFiles/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree "~/Documents/My Library/OrgFiles/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree "~/Documents/My Library/OrgFiles/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree "~/Documents/My Library/OrgFiles/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

        ("m" "Metrics Capture")
        ("mw" "Weight" table-line (file+headline "~/Documents/My Library/OrgFiles/Metrics.org" "Weight")
         "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    )
#+end_src
*** Org Bullets
- Convert the org headline * to circle
#+begin_src emacs-lisp
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
*** Visual fill
#+begin_src emacs-lisp
;; Distraction free writing
(defun ayan/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . ayan/org-mode-visual-fill))
#+end_src
*** Org Babel
**** Babel Support Languages
#+begin_src emacs-lisp
(with-eval-after-load 'org
  (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
	(python . t)
	(dot . t) ;; Doesn't work currently
	)))
;; don't ask me conformation y/n when execute code
(setq org-confirm-babel-evaluate nil)

#+end_src
**** Structure Template
- usage <el / <py tab
#+begin_src emacs-lisp
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

*** Verb Shorcut in Org

#+begin_src emacs-lisp
(with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-c C-r") verb-command-map)
)
#+end_src

*** AutoTangle

- Automatically create init.el file whenever we save this file.
#+begin_src emacs-lisp
;; Automatically tangle our Emacs.org config file when we save it
(defun efs/org-babel-tangle-config ()
  (when (string-equal (file-name-directory (buffer-file-name))
                      (expand-file-name user-emacs-directory))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

*** Org Alert

#+begin_src emacs-lisp
  ;; (use-package org-alert
  ;;   :custom (alert-default-style 'notifications)
  ;;   :config
  ;;   (setq org-alert-interval 300
  ;;         alert-default-style 'osx-notifier
  ;;         org-alert-notification-title "Org Alert Remainder!")
  ;;   (org-alert-enable)
  ;; )
#+end_src

** Language Utils
*** Cheat.sh integration
#+begin_src emacs-lisp
(use-package cheat-sh
  :defer t
)
#+end_src
** Language Support
- Support for emacs unsupported languages
*** Swift
#+begin_src emacs-lisp
(use-package swift-mode
 :mode "\\.swift\\'"
)
#+end_src
- Xcode control from emacs
- https://www.danielde.dev/blog/emacs-for-swift-development
**** Xcode Build Project
#+begin_src emacs-lisp
(defun xcode-build()
  (interactive)
  (shell-command-to-string
     "osascript -e 'tell application \"Xcode\"' -e 'set targetProject to active workspace document' -e 'build targetProject' -e 'end tell'"))
#+end_src
**** Xcode Run Project
#+begin_src emacs-lisp
(defun xcode-run()
  (interactive)
  (shell-command-to-string
    "osascript -e 'tell application \"Xcode\"' -e 'set targetProject to active workspace document' -e 'stop targetProject' -e 'run targetProject' -e 'end tell'"))
#+end_src
**** Xcode Test Project
#+begin_src emacs-lisp
(defun xcode-test()
  (interactive)
  (shell-command-to-string
    "osascript -e 'tell application \"Xcode\"' -e 'set targetProject to active workspace document' -e 'stop targetProject' -e 'test targetProject' -e 'end tell'"))
#+end_src

*** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
   :mode "\\.md\\'"
)
#+end_src

** Terminals
*** Term
#+begin_src emacs-lisp
(use-package term
  :commands term
  :config
  (setq explicit-shell-file-name "zsh")
  ;;(setq explicit-zsh-args '())
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
#+end_src
*** eterm
#+begin_src emacs-lisp
(use-package eterm-256color
  :hook (term-mode . eterm-256color-mode))
#+end_src
*** Vterm
#+begin_src emacs-lisp
(use-package vterm
  :commands vterm
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  ;;(setq vterm-shell "zsh")
  (setq vterm-max-scrollback 10000))
#+end_src
*** Eshell
#+begin_src emacs-lisp
   (defun efs/configure-eshell ()
     ;; Save command history when commands are entered
     (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

     ;; Truncate buffer for performance
     (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

     ;; Bind some useful keys for evil-mode
     (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
     (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
     (evil-normalize-keymaps)

     (setq eshell-history-size         10000
           eshell-buffer-maximum-lines 10000
           eshell-hist-ignoredups t
           eshell-scroll-to-bottom-on-input t))

   (use-package eshell
     :hook (eshell-first-time-mode . efs/configure-eshell))

   (use-package eshell-git-prompt
     :after eshell
     :config
     (eshell-git-prompt-use-theme 'powerline))

  (with-eval-after-load 'esh-opt
   (setq eshell-destroy-buffer-when-process-dies t)
   (setq eshell-visual-commands '("htop" "zsh" "vim")))
#+end_src

** File Management

*** Using linux ls in Mac
#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq insert-directory-program "/usr/local/bin/gls"))
#+end_src
*** Dired
#+begin_src emacs-lisp
  (use-package dired
      :ensure nil
      :commands (dired dired-jump)
      ;; :bind (("C-x C-j" . dired-jump))
      :custom ((dired-listing-switches "-agho --group-directories-first"))
      :config
          (evil-collection-define-key 'normal 'dired-mode-map
              "h" 'dired-single-up-directory
              "l" 'dired-single-buffer)
  )
#+end_src
*** Dired Single
#+begin_src emacs-lisp
(use-package dired-single
  :after dired
)
#+end_src
*** Dir colors
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

*** Open external files

- =!= or =&= to launch an external program on a file

#+begin_src emacs-lisp

  (use-package dired-open
    :after dired
    :config
    (setq dired-open-extensions '(("png" . "open")
                                  ("mkv" . "mpv"))))

#+end_src

*** Hide / show dotfiles

#+begin_src emacs-lisp

(use-package dired-hide-dotfiles
  :hook (dired-mode . dired-hide-dotfiles-mode)
  :config
  (evil-collection-define-key 'normal 'dired-mode-map
    "H" 'dired-hide-dotfiles-mode))

#+end_src


** Keybinding - General
- Easy way to set key bindings
#+begin_src emacs-lisp
(use-package general
  :config
  (general-create-definer ayan/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (ayan/leader-keys
    "t"  '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "choose theme"))
) 
#+end_src
*** Hydra Function KeyBindings
#+begin_src emacs-lisp
(ayan/leader-keys
  "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src
*** Buffers KeyBindings
#+begin_src emacs-lisp
(ayan/leader-keys
    "b"  '(:ignore t :which-key "buffer")
    "br" '(revert-buffer :which-key "Revert Buffer")
    "bs" '(counsel-switch-buffer :which-key "Switch Buffer")
    "bw" '(counsel-switch-buffer-other-window :which-key "Switch Buffer Other Window")
    "bk" '(kill-buffer :which-key "Kill Buffer")
    "bx" '(kill-current-buffer :which-key "Kill Current Buffer")
    )
#+end_src
*** Files KeyBindings
#+begin_src emacs-lisp
(ayan/leader-keys
    "f"  '(:ignore t :which-key "Files")
    "ff" 'counsel-find-file
    )
#+end_src
*** Magit KeyBindings
#+begin_src emacs-lisp
(ayan/leader-keys
    "g"  '(:ignore t :which-key "Git")
    "gs" '(magit-status :which-key "Status")
    )
#+end_src
*** M-x Keybinding
#+begin_src emacs-lisp
  (ayan/leader-keys
    "x" '(counsel-M-x :which-key "M-x")
  )
#+end_src
*** Load File quickly
#+begin_src emacs-lisp
;; Open init file function and shortcut
(defun open-init-file ()
  "Open this very file."
  (interactive)
  (find-file "~/.emacs.d/Emacs.org"))

;; Open
(ayan/leader-keys
    "l"  '(:ignore t :which-key "Load File")
    "li" '(open-init-file :which-key "Init file")
    )
#+end_src
*** Org Shortcuts
#+begin_src emacs-lisp
  (ayan/leader-keys
      "o"  '(:ignore t :which-key "Org")
      )
#+end_src
*** Utilities Shortcuts
#+begin_src emacs-lisp
  (ayan/leader-keys
      "u"  '(:ignore t :which-key "Utility")
      "ui" '(counsel-imenu :which-key "iMenu")
      )
#+end_src
*** Projectile
#+begin_src emacs-lisp
(ayan/leader-keys
    "p" '(:igoner t :which-key "Projectile")
    "pf" '(counsel-projectile-find-file :which-key "Find file")
    "ps" '(counsel-projectile-switch-project :which-key "Switch project")
    "pb" '(counsel-projectile-switch-to-buffer :which-key "Project buffers")
    "pg" '(counsel-projectile-rg :which-key "Grep file")
)
#+end_src
*** Help
#+begin_src emacs-lisp
(ayan/leader-keys
    "h"  'help-for-help
    )
#+end_src
